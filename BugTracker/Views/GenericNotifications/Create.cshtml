@model BugTracker.Models.GenericNotification

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.Created)@*Need to store so it comes back because it cannot receive a null value*@


    <!-- Tools -->
    <section id="tools">
        <ul class="breadcrumb" id="breadcrumb">
            <li class="title" id="pagetitle"><a href="@Url.Action("Index", ViewBag.Controller)">@ViewBag.Controller</a></li>
            @if (ViewBag.Action != null && ViewBag.Id == null)
            {
                <li class="active"><a href="@Url.Action(ViewBag.Action, ViewBag.Controller)">@ViewBag.Action</a></li>
            }
            else if (ViewBag.Action != null && ViewBag.Id != null)
            {
                <li class="active"><a href="@Url.Action(ViewBag.Action, ViewBag.Controller, new { id = ViewBag.Id })">@ViewBag.Action</a></li>
            }
        </ul>        
    </section>

    <!-- Content -->
    <div id='content'>
        <div class='panel panel-default'>
            <div class='panel-heading'>
                <i class='icon-edit icon-large'></i>
                Message/Notification Creation Form
            </div>
            <div class='panel-body'>
                <form>
                    <fieldset>
                        <div class="form-group col-md-6">
                            <label class="control-label" for="User">Title:</label>
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Title" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                        <div class="row"></div>
                        <div class="form-group col-md-4">
                            <label class="control-label" for="User">To:</label>
                            @Html.DropDownList("ToUserId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ToUserId, "", new { @class = "text-danger" })
                        </div>
                        <div class="row"></div>
                        <div class="form-group col-md-10">
                            <label class="control-label" for="User">Message:</label>
                            @Html.TextAreaFor(model => model.Message, 10, 40, htmlAttributes: new { @class = "form-control", placeholder = "Enter Message"  })
                            @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
                        </div>
                        <div class="row"></div>
                        <div class="form-group">
                            <div class="col-md-12" style="text-align:right">
                                <input type="submit" value="Send" class="btn btn-default" />
                            </div>
                        </div>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
    
    
   @*Reference to the js ckeditor*@
    <script src="~/Scripts/ckeditor/ckeditor.js"></script>
    <script>
        CKEDITOR.replace('Message', {
            toolbar: [

                { name: 'document', items: ['Maximize'] },	// Defines toolbar group with name (used to create voice label) and items in 3 subgroups.
                //'/',																					// Line break - next group will be placed in new line.
                ['FontSize'],
                ['Bold', 'Italic', 'Underline', 'StrikeThrough', '-', 'Undo', 'Redo', 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', 'Find', '-', 'Outdent', 'Indent', '-', 'Print'],
                ['NumeredList', 'BulletedList', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],

            ]
        });
    </script>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
