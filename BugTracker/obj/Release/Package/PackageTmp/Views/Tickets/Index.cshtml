
@*@model IEnumerable<BugTracker.Models.Ticket>*@
@using Blog


@model PagedList.IPagedList<BugTracker.Models.Ticket>
@using PagedList.Mvc;
@*@model IEnumerable<Blog.Models.Post>*@
@using System.Text
@using HtmlAgilityPack

@section Css {

    <link rel="stylesheet" href="/css/bootstrap-multiselect.css" type="text/css">
}







<!-- Tools -->
<section id="tools">
    <ul class="breadcrumb" id="breadcrumb">
        <li class="title" id="pagetitle"><a href="@Url.Action("Index", (string)ViewBag.Controller)">@ViewBag.Controller</a></li></ul>


    <div id="toolbar">
        <div class="btn-group">
                <a class="btn" data-toggle="toolbar-tooltip" title="" data-original-title="New Ticket"
                   href="@Url.Action("Create","Tickets",null)">
                    New
                    <i class="icon-file-text-alt"></i>
                </a>
            </div>
    </div>
</section>

    <!-- Content -->
    <div id="content">
        <div class="panel panel-default grid">
            <div class="panel-heading">
                <div class="row">
                        <div class="col-md-1">
                            Tickets
                        </div>
                        <div class="col-md-1">
                            @if (HttpContext.Current.User.IsInRole("Submitter"))
                            {
                                <p>
                                    @Html.ActionLink("Create New", "Create", "Tickets", null, new { @class = "icon-next icon-large" })
                                </p>
                            }
                        </div>

                    <div class="col-md-3">
                        <div class="panel-tools">
                            <div class="btn-group">
                                @*<a class="btn" href="#">
                                        <i class="icon-wrench"></i>
                                        Settings
                                    </a>*@
                                @*<a class="btn" href="#">
                                        <i class="icon-filter"></i>
                                        Filters
                                    </a>*@
                            </div>
                            <div class="badge" style="margin-top:11px">@ViewBag.FoundCount.ToString() items found</div>
                        </div>
                    </div>


                    @using (Html.BeginForm("Index", "Tickets", FormMethod.Post, new { name = "form" }))
                    {
                        <div class="col-md-1">
                            <a class="btn btn-default" data-toggle="toolbar-tooltip" title="" data-original-title="Clear Filters and Search"
                               href="@Url.Action("Index","Tickets",null)">
                                Reset
                                <i class="icon-refresh"></i>
                            </a>
                        </div>

                        <div id="example-collapse-accordion-one" style="display: none; text-align:right" class="panel-collapse collapse in col-md-2">
                            <div class="panel-body" style="padding-top:0px;padding-bottom:0px" data-toggle="toolbar-tooltip" title="" data-original-title="Search Filters">
                                @Html.ListBox("selectedFilters", ViewBag.SearchFilters.searchFilters as MultiSelectList, new { @id = "searchBy" })
                            </div>
                        </div>
                        
                        <input type="hidden" name="page" />
                        <input type="hidden" name="sortingBy" value="@ViewBag.SortingBy" />
                        <div class="col-md-4">
                            <div class="input-group">
                                <input class="form-control" placeholder="Quick search..." type="text" id="query" name="query" value="@ViewBag.currentQuery">
                                <span class="input-group-btn">
                                    <button class="btn" type="submit">
                                        <i class="icon-search"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    }
                </div>
            </div>




            <table class="table table-responsive" id="tableForDatatable">
                <thead>
                    <tr>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "title" ? "titleReverse" : "title")">
                                Title<i class="glyphicon @(ViewBag.SortingBy == "title" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "titleReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "project" ? "projectReverse" : "project")">
                                Project <i class="glyphicon @(ViewBag.SortingBy == "project" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "projectReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "type" ? "typeReverse" : "type" )">
                                Type <i class="glyphicon @(ViewBag.SortingBy == "type" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "typeReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "status" ? "statusReverse" : "status" )">
                                Status <i class="glyphicon @(ViewBag.SortingBy == "status" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "statusReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "priority" ? "priorityReverse" : "priority" )">
                                Priority <i class="glyphicon @(ViewBag.SortingBy == "priority" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "priorityReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "owner" ? "ownerReverse" : "owner" )">
                                Owner <i class="glyphicon @(ViewBag.SortingBy == "owner" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "ownerReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "assignee" ? "assigneeReverse" : "assignee" )">
                                Assignee <i class="glyphicon @(ViewBag.SortingBy == "assignee" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "assigneeReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "created" ? "createdReverse" : "created" )">
                                Created <i class="glyphicon @(ViewBag.SortingBy == "created" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "createdReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>
                        <th>
                            <a class="btn btn-default" data-sortingby="@(ViewBag.SortingBy == "updated" ? "updatedReverse" : "updated" )">
                                Updated <i class="glyphicon @(ViewBag.SortingBy == "updated" ? "glyphicon-chevron-up" : ViewBag.SortingBy == "updatedReverse" ? "glyphicon-chevron-down" : "")"></i>
                            </a>
                        </th>

                        <th class="actions">
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        Html.RenderPartial("_TicketRowPartial", item);
                    }
            </table>
        </div>
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

        @Html.PagedListPager(Model, page => Url.Action("Index", "Tickets",
                    new { query = @ViewBag.currentQuery, page, sortingBy = ViewBag.SortingBy }))
    </div>

    @section Scripts {        
        <script src="/js/bootstrap-multiselect.js"></script>



    @*<script src="Scripts/jquery-1.10.2.min.js"></script>
    <script src="Scripts/jquery-ui-1.10.4.min.js"></script>
    <script src="Scripts/signalR-2.2.0.js"></script>
    <script src="/signalr/hubs"></script>*@

        <script>
      var _gaq=[['_setAccount','UA-XXXXX-X'],['_trackPageview']];
      (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
      g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
      s.parentNode.insertBefore(g, s)
      }(document, 'script'));

      $(document).ready(function () {
          $('#searchBy').multiselect();
          $('#example-collapse-accordion-one').toggle();//If it is hidden then it will show block and vise versa

          $('th a').click(function (event) {
              event.preventDefault();
              form.page.value = 1;
              form.sortingBy.value = $(this).data('sortingby');
              form.submit();
          })
      });


      $(function () {
          var moveShapeHub = $.connection.moveShapeHub,
              $shape = $("#shape"),
              // Send a maximum of 2 messages per second 
              // (mouse movements trigger a lot of messages)
              messageFrequency = 2,
              // Determine how often to send messages in
              // time to abide by the messageFrequency
              updateRate = 1000 / messageFrequency,
              shapeModel = {
                  left: 0,
                  top: 0
              },
              moved = false;
          moveShapeHub.client.updateShape = function (model) {
              shapeModel = model;
              $shape.css({ left: model.left, top: model.top });
          };
          $.connection.hub.start().done(function () {
              $shape.draggable({
                  drag: function () {
                      shapeModel = $shape.offset();
                      moved = true;
                  }
              });
              // Start the client side server update interval
              setInterval(updateServerModel, updateRate);
          });
          function updateServerModel() {
              // Only update server if we have a new movement
              if (moved) {
                  moveShapeHub.server.updateModel(shapeModel);
                  moved = false;
              }
          }
      });

      //$(document).ready(function () {
      //    $('#tableForDatatable').dataTable({
      //        "paging": false,
      //        "ordering": false,
      //        "info": false
      //    });
      //});
        </script>
    }